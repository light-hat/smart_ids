version: '3.8'

services:
#  triton:
#    image: nvcr.io/nvidia/tritonserver:23.01-py3
#    expose:
#      - 8000
#      - 8001
#      - 8002
#    volumes:
#      - ./model_repository:/models
#    environment:
#      - MODEL_REPOSITORY
#    restart: always
#    networks:
#      - backend
#    deploy:
#      resources:
#        limits:
#          memory: "4g"
#          cpus: "2.0"
#        reservations:
#          devices:
#            - driver: nvidia
#              count: all
#              capabilities: [ gpu ]
#    command: ["tritonserver", "--model-repository=/models"]

  triton:
    build:
      context: ./triton
      dockerfile: Dockerfile
      target: triton_server
    restart: always
    networks:
      - backend
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    deploy:
      resources:
        limits:
          memory: "4g"
          cpus: "2.0"
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]

  db:
    image: postgres:15-alpine
    container_name: postgres
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    depends_on:
      - triton
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"

  redis:
    image: redis:7.0.15
    container_name: redis
    expose:
      - 6379
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"

  api:
    image: smart-ids:latest
    build:
      context: ./api
      dockerfile: Dockerfile
      target: app
    expose:
      - 8000
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    environment:
      - API_URL
      - API_PORT
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    depends_on:
      - db
      - redis
    restart: always
    networks:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  worker:
    image: smart-ids-worker:latest
    build:
      context: ./api
      dockerfile: Dockerfile
      target: worker
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    environment:
      - API_URL
      - API_PORT
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    depends_on:
      - db
      - redis
      - api
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    expose:
      - 9090
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"

  grafana:
    image: grafana/grafana:latest
    expose:
      - 3000
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD
      - GF_SECURITY_ADMIN_USER
    volumes:
      - grafana-data:/var/lib/grafana
    restart: always
    networks:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"

  nginx:
    image: smart-ids-router:latest
    build: ./nginx/
    container_name: nginx
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    ports:
      - 82:80
    depends_on:
      - api
      - grafana
    restart: always
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"

volumes:
  grafana-data:
  postgres_data:
  static_volume:
  media_volume:
  redis-data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
