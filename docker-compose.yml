version: '3'

services:
  triton:
    build:
      context: ./triton
      dockerfile: Dockerfile
      target: triton_server
    restart: always
    networks:
      - backend
    expose:
      - 8000
      - 8001
      - 8002
    deploy:
      resources:
        limits:
          memory: "4g"
          cpus: "2.0"
        reservations:
          memory: "2g"
          cpus: "1.0"
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    command: ["tritonserver", "--model-repository=/models/"]

  db:
    image: postgres:15-alpine
    container_name: postgres
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    depends_on:
      - triton
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"

  redis:
    image: redis:7.0.15
    container_name: redis
    expose:
      - 6379
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"

  opensearch:
    image: opensearchproject/opensearch:latest
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_ADMIN_PASS}
    expose:
      - 9200
      - 9600
    restart: always
    networks:
      - backend
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "2048M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  api:
    image: smart-ids:latest
    build:
      context: ./api
      dockerfile: Dockerfile
      target: app
    expose:
      - 8080
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    environment:
      - API_URL
      - API_PORT
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - OPENSEARCH_ADMIN_PASS
    depends_on:
      - db
      - redis
      - opensearch
    restart: always
    networks:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  worker:
    image: smart-ids-worker:latest
    build:
      context: ./api
      dockerfile: Dockerfile
      target: worker
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    environment:
      - API_URL
      - API_PORT
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - OPENSEARCH_ADMIN_PASS
    depends_on:
      - db
      - redis
      - api
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  flower:
    image: smart-ids-flower:latest
    build:
      context: ./api
      dockerfile: Dockerfile
      target: flower
    command: celery -A config flower --port=5555 --basic-auth=$FLOWER_ADMIN_USER:$FLOWER_ADMIN_PASSWORD
    environment:
      - API_URL
      - API_PORT
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - OPENSEARCH_ADMIN_PASS
    restart: always
    networks:
      - frontend
      - backend
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - worker
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  nginx:
    image: smart-ids-router:latest
    build: ./nginx/
    container_name: nginx
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    ports:
      - ${API_PORT}:80
    depends_on:
      - api
    restart: always
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"

volumes:
  opensearch-data:
  grafana-data:
  postgres_data:
  static_volume:
  media_volume:
  redis-data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
